#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function question(query) {
    return new Promise(resolve => rl.question(query, resolve));
}

function executeCommand(command, cwd = process.cwd()) {
    console.log(`\n🔧 Executing: ${command}`);
    try {
        execSync(command, { 
            stdio: 'inherit', 
            cwd: cwd,
            env: { ...process.env, FORCE_COLOR: 'true' }
        });
        return true;
    } catch (error) {
        console.error(`❌ Command failed: ${command}`);
        console.error(error.message);
        return false;
    }
}

function createEnvFile(filePath, content) {
    console.log(`📝 Creating ${filePath}...`);
    fs.writeFileSync(filePath, content);
    console.log(`✅ Created ${filePath}`);
}

async function main() {
    console.log(`
🚀 ChainSync Universal Commerce Platform Setup
===============================================

This script will help you set up the complete ChainSync platform with:
✅ Smart contracts deployment on Push Chain Testnet
✅ Backend API server with blockchain integration
✅ Frontend application with Web3 connectivity
✅ PushPay Telegram bot integration
✅ Real on-chain functionality

Let's get started!
`);

    // Check prerequisites
    console.log('\n📋 Checking prerequisites...');
    
    try {
        execSync('node --version', { stdio: 'pipe' });
        console.log('✅ Node.js is installed');
    } catch {
        console.error('❌ Node.js is not installed. Please install Node.js 18+ first.');
        process.exit(1);
    }

    try {
        execSync('npm --version', { stdio: 'pipe' });
        console.log('✅ npm is installed');
    } catch {
        console.error('❌ npm is not installed. Please install npm first.');
        process.exit(1);
    }

    // Get user configuration
    console.log('\n⚙️ Configuration Setup');
    console.log('Please provide the following information:\n');

    const privateKey = await question('🔑 Enter your Push Chain private key (for deployment): ');
    if (!privateKey.startsWith('0x') || privateKey.length !== 66) {
        console.error('❌ Invalid private key format. Must start with 0x and be 64 characters long.');
        process.exit(1);
    }

    const telegramBotToken = await question('🤖 Enter your Telegram bot token (optional, press Enter to skip): ');
    
    const faucetKey = await question('💧 Enter faucet private key (optional, will use deployment key if empty): ') || privateKey;

    rl.close();

    // Create environment files
    console.log('\n📝 Creating environment configuration...');

    const mainEnvContent = `# ChainSync Environment Configuration
# Generated by setup script on ${new Date().toISOString()}

# Push Chain Configuration
PUSH_CHAIN_RPC_URL=https://rpc.push.org
PUSH_CHAIN_PRIVATE_KEY=${privateKey}
FAUCET_PRIVATE_KEY=${faucetKey}

# Server Configuration
NODE_ENV=development
PORT=3000
FRONTEND_URL=http://localhost:3001

# PushPay Bot Integration
TELEGRAM_BOT_URL=https://t.me/PushPayCryptoBot
${telegramBotToken ? `TELEGRAM_BOT_TOKEN=${telegramBotToken}` : '# TELEGRAM_BOT_TOKEN=your_bot_token_here'}

# Wallet Management
MASTER_WALLET_SEED=chainsync-universal-commerce-2025

# Database Configuration
DATABASE_URL=sqlite:./data/chainsync.db

# Security
JWT_SECRET=chainsync-jwt-secret-${Date.now()}
ENCRYPTION_KEY=chainsync-encryption-${Date.now()}

# Contract addresses (will be updated after deployment)
MARKETPLACE_CONTRACT_ADDRESS=
PAYMENTS_CONTRACT_ADDRESS=
`;

    const clientEnvContent = `# ChainSync Client Environment Variables
# Generated by setup script on ${new Date().toISOString()}

# API Configuration
NEXT_PUBLIC_API_URL=http://localhost:3000

# Blockchain Configuration
NEXT_PUBLIC_PUSH_CHAIN_RPC_URL=https://rpc.push.org

# PushPay Bot Integration
NEXT_PUBLIC_TELEGRAM_BOT_URL=https://t.me/PushPayCryptoBot

# Feature Flags
NEXT_PUBLIC_ENABLE_SOCIAL_FEATURES=true
NEXT_PUBLIC_ENABLE_CROSS_CHAIN_PAYMENTS=true
NEXT_PUBLIC_ENABLE_BOT_INTEGRATION=true
`;

    createEnvFile('.env', mainEnvContent);
    createEnvFile('chainsync/.env', mainEnvContent);
    createEnvFile('chainsync/client/.env.local', clientEnvContent);

    // Install dependencies
    console.log('\n📦 Installing dependencies...');
    
    console.log('\n📦 Installing root dependencies...');
    if (!executeCommand('npm install')) {
        console.error('❌ Failed to install root dependencies');
        process.exit(1);
    }

    console.log('\n📦 Installing ChainSync server dependencies...');
    if (!executeCommand('npm install', './chainsync')) {
        console.error('❌ Failed to install server dependencies');
        process.exit(1);
    }

    console.log('\n📦 Installing ChainSync client dependencies...');
    if (!executeCommand('npm install', './chainsync/client')) {
        console.error('❌ Failed to install client dependencies');
        process.exit(1);
    }

    // Compile smart contracts
    console.log('\n🔨 Compiling smart contracts...');
    if (!executeCommand('npx hardhat compile')) {
        console.error('❌ Failed to compile smart contracts');
        process.exit(1);
    }

    // Deploy smart contracts
    console.log('\n🚀 Deploying smart contracts to Push Chain Testnet...');
    if (!executeCommand('npx hardhat run scripts/deploy-chainsync.js --network localhost')) {
        console.log('\n⚠️  Local deployment failed, trying with Push Chain testnet...');
        
        // Create hardhat config for Push Chain if it doesn't exist
        const hardhatConfigPath = './hardhat.config.js';
        if (!fs.existsSync(hardhatConfigPath)) {
            const hardhatConfig = `require("@nomicfoundation/hardhat-toolbox");

module.exports = {
  solidity: {
    version: "0.8.20",
    settings: {
      optimizer: {
        enabled: true,
        runs: 200
      }
    }
  },
  networks: {
    localhost: {
      url: "http://127.0.0.1:8545"
    },
    pushchain: {
      url: "https://rpc.push.org",
      accounts: ["${privateKey}"],
      chainId: 42069
    }
  },
  etherscan: {
    apiKey: {
      pushchain: "no-api-key-needed"
    },
    customChains: [
      {
        network: "pushchain",
        chainId: 42069,
        urls: {
          apiURL: "https://scan.push.org/api",
          browserURL: "https://scan.push.org"
        }
      }
    ]
  }
};`;
            fs.writeFileSync(hardhatConfigPath, hardhatConfig);
        }

        if (!executeCommand('npx hardhat run scripts/deploy-chainsync.js --network pushchain')) {
            console.error('❌ Failed to deploy smart contracts to Push Chain');
            console.log('\n💡 You can deploy manually later using:');
            console.log('   npx hardhat run scripts/deploy-chainsync.js --network pushchain');
        }
    }

    // Create data directory
    const dataDir = './chainsync/data';
    if (!fs.existsSync(dataDir)) {
        fs.mkdirSync(dataDir, { recursive: true });
        console.log('✅ Created data directory');
    }

    // Initialize database
    console.log('\n🗄️  Initializing database...');
    if (!executeCommand('node database/database.js', './chainsync')) {
        console.log('⚠️  Database initialization failed, will be created on first run');
    }

    // Build frontend
    console.log('\n🏗️  Building frontend...');
    if (!executeCommand('npm run build', './chainsync/client')) {
        console.log('⚠️  Frontend build failed, you can build it later with: cd chainsync/client && npm run build');
    }

    // Create startup scripts
    console.log('\n📜 Creating startup scripts...');

    const startScript = `#!/bin/bash
# ChainSync Startup Script

echo "🚀 Starting ChainSync Universal Commerce Platform..."

# Start backend server
echo "📡 Starting backend server..."
cd chainsync
npm run dev &
BACKEND_PID=$!

# Wait a moment for backend to start
sleep 3

# Start frontend client
echo "🌐 Starting frontend client..."
cd client
npm run dev &
FRONTEND_PID=$!

echo "✅ ChainSync is running!"
echo "📡 Backend: http://localhost:3000"
echo "🌐 Frontend: http://localhost:3001"
echo "🔍 Health check: http://localhost:3000/health"

# Wait for user input to stop
echo "Press Ctrl+C to stop all services..."
wait
`;

    fs.writeFileSync('./start-chainsync.sh', startScript);
    if (process.platform !== 'win32') {
        executeCommand('chmod +x start-chainsync.sh');
    }

    const startScriptWindows = `@echo off
echo 🚀 Starting ChainSync Universal Commerce Platform...

echo 📡 Starting backend server...
cd chainsync
start "ChainSync Backend" cmd /k "npm run dev"

timeout /t 3 /nobreak > nul

echo 🌐 Starting frontend client...
cd client
start "ChainSync Frontend" cmd /k "npm run dev"

echo ✅ ChainSync is running!
echo 📡 Backend: http://localhost:3000
echo 🌐 Frontend: http://localhost:3001
echo 🔍 Health check: http://localhost:3000/health

pause
`;

    fs.writeFileSync('./start-chainsync.bat', startScriptWindows);

    // Success message
    console.log(`
🎉 ChainSync Setup Complete!
============================

Your ChainSync Universal Commerce Platform is ready!

📁 Project Structure:
├── Smart Contracts (deployed to Push Chain)
├── Backend API Server (./chainsync/)
├── Frontend Application (./chainsync/client/)
├── PushPay Bot Integration
└── Blockchain Wallet Management

🚀 Quick Start:
${process.platform === 'win32' ? 
  '   .\\start-chainsync.bat' : 
  '   ./start-chainsync.sh'
}

Or start manually:
1. Backend:  cd chainsync && npm run dev
2. Frontend: cd chainsync/client && npm run dev

🌐 Access Points:
- Frontend: http://localhost:3001
- Backend API: http://localhost:3000
- Health Check: http://localhost:3000/health
- Blockchain Status: http://localhost:3000/api/blockchain/stats

🔧 Key Features Enabled:
✅ Real smart contracts on Push Chain Testnet
✅ Deterministic wallets from Telegram IDs
✅ Cross-chain marketplace functionality
✅ Social commerce with on-chain posts
✅ Universal payment system
✅ Real-time analytics dashboard
✅ PushPay bot integration

💡 Next Steps:
1. Start the platform using the startup script
2. Open http://localhost:3001 in your browser
3. Connect your MetaMask wallet
4. Switch to Push Chain Testnet
5. Start using the universal marketplace!

🏆 Your Project G.U.D winning platform is ready to dominate!

Need help? Check the documentation in ./docs/
`);

    process.exit(0);
}

main().catch(error => {
    console.error('\n❌ Setup failed:', error);
    process.exit(1);
});